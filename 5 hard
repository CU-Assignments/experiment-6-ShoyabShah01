import java.util.*;
import java.util.stream.Collectors;

class Product {
    String name;
    String category;
    double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }
}

public class ProductProcessing {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 800),
            new Product("Smartphone", "Electronics", 600),
            new Product("TV", "Electronics", 1200),
            new Product("Sofa", "Furniture", 300),
            new Product("Table", "Furniture", 150),
            new Product("Chair", "Furniture", 100),
            new Product("Jeans", "Clothing", 50),
            new Product("T-Shirt", "Clothing", 20),
            new Product("Jacket", "Clothing", 80)
        );

        // 1. Grouping products by category
        Map<String, List<Product>> groupedProducts = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));

        System.out.println("Products Grouped by Category:");
        groupedProducts.forEach((category, list) -> {
            System.out.println(category + ": " + list.stream().map(p -> p.name).collect(Collectors.joining(", ")));
        });

        // 2. Finding the most expensive product in each category
        System.out.println("\nMost Expensive Product in Each Category:");
        groupedProducts.forEach((category, list) -> {
            Product expensive = list.stream().max(Comparator.comparingDouble(p -> p.price)).orElse(null);
            if (expensive != null) {
                System.out.println(category + ": " + expensive.name + " ($" + expensive.price + ")");
            }
        });

        // 3. Calculating the average price of all products
        double avgPrice = products.stream()
                .mapToDouble(p -> p.price)
                .average()
                .orElse(0.0);

        System.out.println("\nAverage Price of All Products: $" + avgPrice);
    }
}
